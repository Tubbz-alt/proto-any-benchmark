// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: b/b.proto

package b

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgVedycrEaaidqrielx struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgVedycrEaaidqrielx) Reset()         { *m = MsgVedycrEaaidqrielx{} }
func (m *MsgVedycrEaaidqrielx) String() string { return proto.CompactTextString(m) }
func (*MsgVedycrEaaidqrielx) ProtoMessage()    {}
func (*MsgVedycrEaaidqrielx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4a959e94db1d3e2, []int{0}
}
func (m *MsgVedycrEaaidqrielx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVedycrEaaidqrielx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVedycrEaaidqrielx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVedycrEaaidqrielx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVedycrEaaidqrielx.Merge(m, src)
}
func (m *MsgVedycrEaaidqrielx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVedycrEaaidqrielx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVedycrEaaidqrielx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVedycrEaaidqrielx proto.InternalMessageInfo

func (m *MsgVedycrEaaidqrielx) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgVedycrEaaidqrielx) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgVedycrEaaidqrielx) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgVedycrEaaidqrielx) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgVedycrEaaidqrielx) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgVedycrEaaidqrielx) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgVedycrEaaidqrielx) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgVedycrEaaidqrielx) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgVedycrEaaidqrielx) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgVedycrEaaidqrielx) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

type MsgMliexjcuyIcbatudgl struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgMliexjcuyIcbatudgl) Reset()         { *m = MsgMliexjcuyIcbatudgl{} }
func (m *MsgMliexjcuyIcbatudgl) String() string { return proto.CompactTextString(m) }
func (*MsgMliexjcuyIcbatudgl) ProtoMessage()    {}
func (*MsgMliexjcuyIcbatudgl) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4a959e94db1d3e2, []int{1}
}
func (m *MsgMliexjcuyIcbatudgl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMliexjcuyIcbatudgl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMliexjcuyIcbatudgl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMliexjcuyIcbatudgl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMliexjcuyIcbatudgl.Merge(m, src)
}
func (m *MsgMliexjcuyIcbatudgl) XXX_Size() int {
	return m.Size()
}
func (m *MsgMliexjcuyIcbatudgl) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMliexjcuyIcbatudgl.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMliexjcuyIcbatudgl proto.InternalMessageInfo

func (m *MsgMliexjcuyIcbatudgl) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgMliexjcuyIcbatudgl) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgMliexjcuyIcbatudgl) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgMliexjcuyIcbatudgl) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgMliexjcuyIcbatudgl) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgMliexjcuyIcbatudgl) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgMliexjcuyIcbatudgl) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgMliexjcuyIcbatudgl) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgMliexjcuyIcbatudgl) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgMliexjcuyIcbatudgl) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

type MsgYvclzswKwoiqfnvf struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgYvclzswKwoiqfnvf) Reset()         { *m = MsgYvclzswKwoiqfnvf{} }
func (m *MsgYvclzswKwoiqfnvf) String() string { return proto.CompactTextString(m) }
func (*MsgYvclzswKwoiqfnvf) ProtoMessage()    {}
func (*MsgYvclzswKwoiqfnvf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4a959e94db1d3e2, []int{2}
}
func (m *MsgYvclzswKwoiqfnvf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgYvclzswKwoiqfnvf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgYvclzswKwoiqfnvf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgYvclzswKwoiqfnvf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgYvclzswKwoiqfnvf.Merge(m, src)
}
func (m *MsgYvclzswKwoiqfnvf) XXX_Size() int {
	return m.Size()
}
func (m *MsgYvclzswKwoiqfnvf) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgYvclzswKwoiqfnvf.DiscardUnknown(m)
}

var xxx_messageInfo_MsgYvclzswKwoiqfnvf proto.InternalMessageInfo

func (m *MsgYvclzswKwoiqfnvf) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgYvclzswKwoiqfnvf) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgYvclzswKwoiqfnvf) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgYvclzswKwoiqfnvf) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgYvclzswKwoiqfnvf) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgYvclzswKwoiqfnvf) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgYvclzswKwoiqfnvf) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgYvclzswKwoiqfnvf) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgYvclzswKwoiqfnvf) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgYvclzswKwoiqfnvf) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgVedycrEaaidqrielx)(nil), "eomaxwhm.mlkyzwdkup.akitxgghqd.MsgVedycrEaaidqrielx")
	proto.RegisterType((*MsgMliexjcuyIcbatudgl)(nil), "eomaxwhm.mlkyzwdkup.akitxgghqd.MsgMliexjcuyIcbatudgl")
	proto.RegisterType((*MsgYvclzswKwoiqfnvf)(nil), "eomaxwhm.mlkyzwdkup.akitxgghqd.MsgYvclzswKwoiqfnvf")
}

func init() { proto.RegisterFile("b/b.proto", fileDescriptor_f4a959e94db1d3e2) }

var fileDescriptor_f4a959e94db1d3e2 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xd2, 0x3d, 0x4e, 0xc3, 0x30,
	0x1c, 0x05, 0xf0, 0xfe, 0x69, 0x29, 0x34, 0xea, 0x54, 0x40, 0xf2, 0x64, 0x45, 0x9d, 0xb2, 0x34,
	0x19, 0xb8, 0x01, 0x12, 0x12, 0x08, 0x65, 0xc9, 0x80, 0x04, 0x9b, 0xbf, 0xe2, 0xb8, 0xf9, 0x6a,
	0x9d, 0xa4, 0x49, 0x7a, 0x0a, 0xae, 0x00, 0x5c, 0x86, 0xb1, 0x23, 0x23, 0x6a, 0x2e, 0x82, 0x5c,
	0x5f, 0xa2, 0xe3, 0xcf, 0xef, 0x59, 0x7a, 0xc3, 0xdf, 0x99, 0xd1, 0x80, 0xfa, 0x1b, 0x5d, 0xd6,
	0xe5, 0x02, 0x8b, 0x32, 0x27, 0x5d, 0x9b, 0xe4, 0x7e, 0x9e, 0xa5, 0xfd, 0xbe, 0xe5, 0x69, 0xb3,
	0xf1, 0x49, 0xaa, 0xea, 0x4e, 0xca, 0x64, 0xcb, 0x97, 0x5f, 0xe0, 0xdc, 0x86, 0x95, 0x7c, 0x15,
	0xbc, 0x67, 0xfa, 0x91, 0x10, 0xc5, 0xb7, 0x5a, 0x89, 0xac, 0x5b, 0xcc, 0x1d, 0x20, 0x08, 0x5c,
	0xf0, 0x66, 0x11, 0x10, 0x23, 0x8a, 0x2e, 0x5c, 0xf0, 0xe6, 0x11, 0x50, 0x23, 0x86, 0xc6, 0x2e,
	0x78, 0x93, 0x08, 0x98, 0x11, 0x47, 0x13, 0xdb, 0xe4, 0x46, 0x02, 0x5d, 0xba, 0xe0, 0x8d, 0x23,
	0x10, 0x46, 0x31, 0x9a, 0xda, 0x7f, 0xb1, 0x91, 0x44, 0x57, 0xb6, 0x29, 0x8d, 0x12, 0x74, 0x6d,
	0xb3, 0xc4, 0x48, 0xa1, 0x99, 0xcd, 0x94, 0xd1, 0x1a, 0x39, 0x36, 0x5b, 0x2f, 0xbf, 0xc1, 0xb9,
	0x0b, 0x2b, 0x19, 0x66, 0x4a, 0x74, 0x6b, 0xd6, 0xf4, 0xcf, 0x8c, 0x92, 0xba, 0xe1, 0x32, 0x3b,
	0xab, 0x95, 0x9f, 0xe0, 0xdc, 0x84, 0x95, 0x7c, 0xdb, 0xb1, 0x6c, 0x5f, 0xb5, 0x2f, 0x6d, 0xa9,
	0xb6, 0x71, 0xb1, 0x8b, 0xcf, 0x69, 0xe3, 0xc3, 0xd3, 0xcf, 0x11, 0xc3, 0xe1, 0x88, 0xe1, 0xef,
	0x88, 0xe1, 0x63, 0xc0, 0xa3, 0xc3, 0x80, 0x47, 0xbf, 0x03, 0x1e, 0xbd, 0xfb, 0x52, 0xd5, 0x49,
	0x43, 0x7d, 0x56, 0xe6, 0x81, 0x16, 0x52, 0x14, 0xab, 0x42, 0xd4, 0x6d, 0xa9, 0xd3, 0xe0, 0x74,
	0x48, 0x2b, 0x52, 0xf4, 0x2b, 0x2a, 0x0a, 0x96, 0xe4, 0x44, 0xa7, 0x01, 0xa5, 0xd3, 0xd3, 0xf3,
	0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x80, 0x33, 0xc2, 0x6c, 0x02, 0x00, 0x00,
}

func (m *MsgVedycrEaaidqrielx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVedycrEaaidqrielx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVedycrEaaidqrielx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintB(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintB(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintB(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintB(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintB(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintB(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintB(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintB(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMliexjcuyIcbatudgl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMliexjcuyIcbatudgl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMliexjcuyIcbatudgl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintB(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintB(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintB(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintB(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintB(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintB(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintB(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintB(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgYvclzswKwoiqfnvf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgYvclzswKwoiqfnvf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgYvclzswKwoiqfnvf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintB(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintB(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintB(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintB(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintB(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintB(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintB(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintB(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintB(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintB(dAtA []byte, offset int, v uint64) int {
	offset -= sovB(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgVedycrEaaidqrielx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovB(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovB(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	return n
}

func (m *MsgMliexjcuyIcbatudgl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovB(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovB(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	return n
}

func (m *MsgYvclzswKwoiqfnvf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovB(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovB(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovB(uint64(l))
	}
	return n
}

func sovB(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozB(x uint64) (n int) {
	return sovB(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgVedycrEaaidqrielx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowB
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVedycrEaaidqrielx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVedycrEaaidqrielx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipB(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMliexjcuyIcbatudgl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowB
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMliexjcuyIcbatudgl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMliexjcuyIcbatudgl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipB(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgYvclzswKwoiqfnvf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowB
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgYvclzswKwoiqfnvf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgYvclzswKwoiqfnvf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowB
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthB
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthB
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipB(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthB
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipB(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowB
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowB
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowB
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthB
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupB
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthB
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthB        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowB          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupB = fmt.Errorf("proto: unexpected end of group")
)
