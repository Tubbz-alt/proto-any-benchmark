// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: root.proto

package main

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	a "github.com/regen-network/proto-any-benchmark/a"
	b "github.com/regen-network/proto-any-benchmark/b"
	c "github.com/regen-network/proto-any-benchmark/c"
	d "github.com/regen-network/proto-any-benchmark/d"
	e "github.com/regen-network/proto-any-benchmark/e"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OneOfTest struct {
	// Types that are valid to be assigned to Sum:
	//	*OneOfTest_A
	//	*OneOfTest_B
	//	*OneOfTest_C
	//	*OneOfTest_D
	//	*OneOfTest_E
	//	*OneOfTest_F
	//	*OneOfTest_G
	//	*OneOfTest_H
	//	*OneOfTest_I
	//	*OneOfTest_K
	//	*OneOfTest_L
	//	*OneOfTest_M
	//	*OneOfTest_N
	//	*OneOfTest_O
	//	*OneOfTest_P
	Sum isOneOfTest_Sum `protobuf_oneof:"sum"`
}

func (m *OneOfTest) Reset()         { *m = OneOfTest{} }
func (m *OneOfTest) String() string { return proto.CompactTextString(m) }
func (*OneOfTest) ProtoMessage()    {}
func (*OneOfTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08a043f6ee9336a8, []int{0}
}
func (m *OneOfTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneOfTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneOfTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneOfTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneOfTest.Merge(m, src)
}
func (m *OneOfTest) XXX_Size() int {
	return m.Size()
}
func (m *OneOfTest) XXX_DiscardUnknown() {
	xxx_messageInfo_OneOfTest.DiscardUnknown(m)
}

var xxx_messageInfo_OneOfTest proto.InternalMessageInfo

type isOneOfTest_Sum interface {
	isOneOfTest_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OneOfTest_A struct {
	A *a.MsgPousljlwlybJloivfeuc `protobuf:"bytes,1,opt,name=a,proto3,oneof" json:"a,omitempty"`
}
type OneOfTest_B struct {
	B *a.MsgMrtsdxfVexxblyqrzg `protobuf:"bytes,2,opt,name=b,proto3,oneof" json:"b,omitempty"`
}
type OneOfTest_C struct {
	C *a.MsgLpctqrWokmmwtlm `protobuf:"bytes,3,opt,name=c,proto3,oneof" json:"c,omitempty"`
}
type OneOfTest_D struct {
	D *b.MsgVedycrEaaidqrielx `protobuf:"bytes,4,opt,name=d,proto3,oneof" json:"d,omitempty"`
}
type OneOfTest_E struct {
	E *b.MsgMliexjcuyIcbatudgl `protobuf:"bytes,5,opt,name=e,proto3,oneof" json:"e,omitempty"`
}
type OneOfTest_F struct {
	F *b.MsgYvclzswKwoiqfnvf `protobuf:"bytes,6,opt,name=f,proto3,oneof" json:"f,omitempty"`
}
type OneOfTest_G struct {
	G *c.MsgIggmhogotlAdolnphpfi `protobuf:"bytes,7,opt,name=g,proto3,oneof" json:"g,omitempty"`
}
type OneOfTest_H struct {
	H *c.MsgCrbjxhtnahzEkoyklxdc `protobuf:"bytes,8,opt,name=h,proto3,oneof" json:"h,omitempty"`
}
type OneOfTest_I struct {
	I *c.MsgUzewjmoiKursyvlk `protobuf:"bytes,9,opt,name=i,proto3,oneof" json:"i,omitempty"`
}
type OneOfTest_K struct {
	K *d.MsgBtolfeintfGglqwlxnq `protobuf:"bytes,10,opt,name=k,proto3,oneof" json:"k,omitempty"`
}
type OneOfTest_L struct {
	L *d.MsgMuqmoycgmDomajqaep `protobuf:"bytes,11,opt,name=l,proto3,oneof" json:"l,omitempty"`
}
type OneOfTest_M struct {
	M *d.MsgTqviyexlSsdnfgf `protobuf:"bytes,12,opt,name=m,proto3,oneof" json:"m,omitempty"`
}
type OneOfTest_N struct {
	N *e.MsgJirzatkEjglwxlp `protobuf:"bytes,13,opt,name=n,proto3,oneof" json:"n,omitempty"`
}
type OneOfTest_O struct {
	O *e.MsgUzaztuwkehwWuhanr `protobuf:"bytes,14,opt,name=o,proto3,oneof" json:"o,omitempty"`
}
type OneOfTest_P struct {
	P *e.MsgXoxmigzwnxqIniehuizyb `protobuf:"bytes,15,opt,name=p,proto3,oneof" json:"p,omitempty"`
}

func (*OneOfTest_A) isOneOfTest_Sum() {}
func (*OneOfTest_B) isOneOfTest_Sum() {}
func (*OneOfTest_C) isOneOfTest_Sum() {}
func (*OneOfTest_D) isOneOfTest_Sum() {}
func (*OneOfTest_E) isOneOfTest_Sum() {}
func (*OneOfTest_F) isOneOfTest_Sum() {}
func (*OneOfTest_G) isOneOfTest_Sum() {}
func (*OneOfTest_H) isOneOfTest_Sum() {}
func (*OneOfTest_I) isOneOfTest_Sum() {}
func (*OneOfTest_K) isOneOfTest_Sum() {}
func (*OneOfTest_L) isOneOfTest_Sum() {}
func (*OneOfTest_M) isOneOfTest_Sum() {}
func (*OneOfTest_N) isOneOfTest_Sum() {}
func (*OneOfTest_O) isOneOfTest_Sum() {}
func (*OneOfTest_P) isOneOfTest_Sum() {}

func (m *OneOfTest) GetSum() isOneOfTest_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *OneOfTest) GetA() *a.MsgPousljlwlybJloivfeuc {
	if x, ok := m.GetSum().(*OneOfTest_A); ok {
		return x.A
	}
	return nil
}

func (m *OneOfTest) GetB() *a.MsgMrtsdxfVexxblyqrzg {
	if x, ok := m.GetSum().(*OneOfTest_B); ok {
		return x.B
	}
	return nil
}

func (m *OneOfTest) GetC() *a.MsgLpctqrWokmmwtlm {
	if x, ok := m.GetSum().(*OneOfTest_C); ok {
		return x.C
	}
	return nil
}

func (m *OneOfTest) GetD() *b.MsgVedycrEaaidqrielx {
	if x, ok := m.GetSum().(*OneOfTest_D); ok {
		return x.D
	}
	return nil
}

func (m *OneOfTest) GetE() *b.MsgMliexjcuyIcbatudgl {
	if x, ok := m.GetSum().(*OneOfTest_E); ok {
		return x.E
	}
	return nil
}

func (m *OneOfTest) GetF() *b.MsgYvclzswKwoiqfnvf {
	if x, ok := m.GetSum().(*OneOfTest_F); ok {
		return x.F
	}
	return nil
}

func (m *OneOfTest) GetG() *c.MsgIggmhogotlAdolnphpfi {
	if x, ok := m.GetSum().(*OneOfTest_G); ok {
		return x.G
	}
	return nil
}

func (m *OneOfTest) GetH() *c.MsgCrbjxhtnahzEkoyklxdc {
	if x, ok := m.GetSum().(*OneOfTest_H); ok {
		return x.H
	}
	return nil
}

func (m *OneOfTest) GetI() *c.MsgUzewjmoiKursyvlk {
	if x, ok := m.GetSum().(*OneOfTest_I); ok {
		return x.I
	}
	return nil
}

func (m *OneOfTest) GetK() *d.MsgBtolfeintfGglqwlxnq {
	if x, ok := m.GetSum().(*OneOfTest_K); ok {
		return x.K
	}
	return nil
}

func (m *OneOfTest) GetL() *d.MsgMuqmoycgmDomajqaep {
	if x, ok := m.GetSum().(*OneOfTest_L); ok {
		return x.L
	}
	return nil
}

func (m *OneOfTest) GetM() *d.MsgTqviyexlSsdnfgf {
	if x, ok := m.GetSum().(*OneOfTest_M); ok {
		return x.M
	}
	return nil
}

func (m *OneOfTest) GetN() *e.MsgJirzatkEjglwxlp {
	if x, ok := m.GetSum().(*OneOfTest_N); ok {
		return x.N
	}
	return nil
}

func (m *OneOfTest) GetO() *e.MsgUzaztuwkehwWuhanr {
	if x, ok := m.GetSum().(*OneOfTest_O); ok {
		return x.O
	}
	return nil
}

func (m *OneOfTest) GetP() *e.MsgXoxmigzwnxqIniehuizyb {
	if x, ok := m.GetSum().(*OneOfTest_P); ok {
		return x.P
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OneOfTest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OneOfTest_A)(nil),
		(*OneOfTest_B)(nil),
		(*OneOfTest_C)(nil),
		(*OneOfTest_D)(nil),
		(*OneOfTest_E)(nil),
		(*OneOfTest_F)(nil),
		(*OneOfTest_G)(nil),
		(*OneOfTest_H)(nil),
		(*OneOfTest_I)(nil),
		(*OneOfTest_K)(nil),
		(*OneOfTest_L)(nil),
		(*OneOfTest_M)(nil),
		(*OneOfTest_N)(nil),
		(*OneOfTest_O)(nil),
		(*OneOfTest_P)(nil),
	}
}

func init() {
	proto.RegisterType((*OneOfTest)(nil), "root.OneOfTest")
}

func init() { proto.RegisterFile("root.proto", fileDescriptor_08a043f6ee9336a8) }

var fileDescriptor_08a043f6ee9336a8 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd4, 0xcb, 0x8a, 0xe5, 0x44,
	0x18, 0xc0, 0xf1, 0x13, 0xe7, 0xcc, 0xd8, 0x27, 0xe3, 0x05, 0xb2, 0x0a, 0xb3, 0x38, 0x88, 0x20,
	0x88, 0x60, 0x8e, 0xcc, 0xa8, 0x88, 0x2b, 0xed, 0x99, 0xa3, 0xd3, 0x33, 0x1e, 0x46, 0xb4, 0x2f,
	0xea, 0xa6, 0xa9, 0x54, 0x55, 0xaa, 0x2a, 0xa9, 0x7b, 0x2a, 0xa9, 0x4a, 0x9e, 0xc2, 0x57, 0x11,
	0x7c, 0x08, 0x71, 0xd5, 0x4b, 0x97, 0xd2, 0xfd, 0x22, 0x43, 0xa5, 0xd3, 0xeb, 0xf4, 0xee, 0xcb,
	0x85, 0x1f, 0xe1, 0xff, 0x15, 0x49, 0x53, 0xab, 0x94, 0x2b, 0xb4, 0x55, 0x4e, 0x65, 0xeb, 0x38,
	0x3f, 0xd9, 0x80, 0x1d, 0xb8, 0xbd, 0xf1, 0x64, 0x53, 0xee, 0xca, 0xbb, 0x11, 0xee, 0xe0, 0xdd,
	0x88, 0x76, 0xe8, 0x6e, 0xc4, 0x3b, 0x3c, 0x8f, 0x9f, 0x38, 0xca, 0x2c, 0xba, 0xd4, 0xc0, 0xba,
	0x61, 0x07, 0x55, 0x2b, 0x54, 0x7b, 0x39, 0x3d, 0x99, 0x2f, 0x6e, 0x5f, 0xfb, 0xf8, 0xaf, 0xa3,
	0x74, 0xf3, 0x46, 0xe2, 0x37, 0xd5, 0x29, 0x6e, 0x5d, 0xb6, 0x4f, 0x13, 0x90, 0x27, 0x1f, 0x25,
	0x9f, 0x3e, 0x7e, 0xfa, 0x55, 0xe1, 0x54, 0x69, 0x0d, 0xa4, 0x92, 0xe9, 0x42, 0x9b, 0x5e, 0x98,
	0x3a, 0x14, 0x54, 0x60, 0xde, 0x69, 0x17, 0x68, 0x71, 0x68, 0xc9, 0xcf, 0xaa, 0x6b, 0x79, 0xcd,
	0x3d, 0x1f, 0xca, 0x57, 0x5c, 0xb1, 0xbe, 0xc2, 0x1d, 0x7c, 0xb9, 0xfa, 0x25, 0x01, 0xd9, 0xf3,
	0x34, 0x29, 0xf3, 0x77, 0x26, 0xe6, 0xd9, 0x22, 0x73, 0xb0, 0xae, 0x45, 0xa1, 0x3a, 0xc7, 0x21,
	0x94, 0x7c, 0x30, 0x76, 0x24, 0x11, 0x29, 0xb3, 0xef, 0xd2, 0x04, 0xe6, 0x0f, 0x26, 0xe4, 0x8b,
	0x45, 0xe4, 0x27, 0x0d, 0x9d, 0xb1, 0x17, 0xaa, 0x11, 0xc2, 0x3b, 0x2e, 0xa2, 0x00, 0xb3, 0x17,
	0x69, 0x82, 0xf2, 0xf5, 0x24, 0x7c, 0x59, 0x60, 0x25, 0x40, 0xf0, 0x54, 0x14, 0x82, 0x37, 0xc3,
	0xe8, 0x51, 0xd3, 0xe9, 0x02, 0x34, 0xcc, 0x05, 0x42, 0xa8, 0x41, 0xd1, 0x38, 0xc7, 0x68, 0x80,
	0x76, 0x0f, 0x00, 0x43, 0xc6, 0x32, 0xcc, 0x43, 0x54, 0x50, 0x6c, 0x82, 0xf3, 0x87, 0x73, 0x93,
	0x65, 0xe5, 0xc0, 0x19, 0x0e, 0x35, 0xec, 0x86, 0x13, 0x58, 0x02, 0xd7, 0x21, 0xc2, 0x23, 0x83,
	0x63, 0x93, 0x2a, 0x7f, 0x34, 0x37, 0x59, 0x66, 0x7e, 0xef, 0x21, 0x1f, 0x5b, 0xff, 0xda, 0x2b,
	0x66, 0x2a, 0xd9, 0x57, 0x11, 0xa9, 0xb2, 0x1f, 0xd2, 0x84, 0xe4, 0xef, 0x4e, 0xc8, 0xd7, 0x05,
	0x14, 0x4e, 0xa9, 0xb2, 0x07, 0xb5, 0x2d, 0xb0, 0x09, 0x68, 0xf0, 0x8d, 0x31, 0xac, 0x90, 0x6c,
	0xec, 0xa5, 0xaa, 0xa2, 0x71, 0x42, 0x88, 0xa0, 0x8a, 0x28, 0xc7, 0xbf, 0x47, 0x8a, 0x4b, 0x4d,
	0x75, 0xc5, 0xa2, 0x43, 0xa2, 0x43, 0xf3, 0xa3, 0xfb, 0x3a, 0xcf, 0x6d, 0x59, 0x07, 0xea, 0x24,
	0xa0, 0xe3, 0xbe, 0x51, 0x43, 0xc3, 0x03, 0x9a, 0x16, 0x4d, 0xb3, 0xe3, 0x34, 0x61, 0xf9, 0x66,
	0x72, 0x9e, 0x2e, 0x3b, 0x67, 0x23, 0xf6, 0xb5, 0x50, 0xec, 0x75, 0x67, 0xdb, 0xa1, 0xe7, 0x4d,
	0x34, 0x58, 0xdc, 0x52, 0x93, 0xa7, 0xf3, 0x96, 0x34, 0x2d, 0x71, 0x10, 0x23, 0xd2, 0x4d, 0x51,
	0x97, 0xa8, 0x03, 0x4c, 0x17, 0x24, 0x78, 0x44, 0xb1, 0xf4, 0x5d, 0x24, 0x8e, 0x9d, 0xe2, 0x15,
	0x66, 0xd2, 0x55, 0x3f, 0x12, 0x6e, 0x3c, 0x0f, 0xd2, 0x44, 0xa5, 0x89, 0x79, 0x79, 0xfe, 0x78,
	0xce, 0xbb, 0xa4, 0x1c, 0x3a, 0x23, 0xd4, 0x00, 0x89, 0x78, 0xa1, 0x04, 0xa8, 0x0d, 0xc0, 0x3a,
	0x22, 0x3c, 0x1e, 0x39, 0x91, 0xbf, 0x37, 0x1f, 0xb9, 0x25, 0xe4, 0xd4, 0xf4, 0x6c, 0xc0, 0x81,
	0xff, 0xda, 0x22, 0x59, 0x91, 0x69, 0x41, 0x22, 0x06, 0x91, 0xf9, 0xfb, 0x73, 0x90, 0x7e, 0x1c,
	0xb9, 0x41, 0x8a, 0x15, 0xd4, 0x06, 0x8d, 0x3c, 0x94, 0x06, 0x16, 0x38, 0xc8, 0x61, 0x54, 0xba,
	0x6a, 0x40, 0x34, 0x5e, 0x31, 0x3b, 0x02, 0xd7, 0xec, 0x6b, 0xc2, 0x7d, 0xe0, 0xd3, 0x57, 0xc8,
	0x18, 0x44, 0xe5, 0x1f, 0xcc, 0x41, 0x96, 0x8d, 0xb3, 0x11, 0x8c, 0xae, 0xf3, 0x0d, 0xa6, 0xfe,
	0xa2, 0xa3, 0x40, 0xda, 0xa8, 0xa8, 0xec, 0x65, 0x9a, 0xe8, 0xfc, 0xc3, 0x49, 0xf9, 0xe6, 0x1e,
	0xca, 0x6f, 0x2a, 0x08, 0x46, 0x46, 0x2f, 0x83, 0x39, 0x91, 0x0c, 0xd3, 0x8e, 0x8d, 0x43, 0x19,
	0x25, 0xfd, 0xed, 0xd1, 0xbf, 0x7f, 0x7f, 0xbe, 0xfe, 0x2c, 0xc6, 0x7f, 0x98, 0x3e, 0x68, 0x3b,
	0x71, 0xbc, 0xfd, 0xe7, 0x7a, 0x9b, 0x5c, 0x5d, 0x6f, 0x93, 0xff, 0xaf, 0xb7, 0xc9, 0x9f, 0x37,
	0xdb, 0xd5, 0xd5, 0xcd, 0x76, 0xf5, 0xdf, 0xcd, 0x76, 0xf5, 0xc7, 0x5a, 0x00, 0x26, 0xcb, 0x47,
	0xd3, 0xaf, 0xe5, 0xd9, 0xdb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x90, 0x90, 0x59, 0xcc, 0x04,
	0x00, 0x00,
}

func (this *OneOfTest) GetMsg() Msg {
	if x := this.GetA(); x != nil {
		return x
	}
	if x := this.GetB(); x != nil {
		return x
	}
	if x := this.GetC(); x != nil {
		return x
	}
	if x := this.GetD(); x != nil {
		return x
	}
	if x := this.GetE(); x != nil {
		return x
	}
	if x := this.GetF(); x != nil {
		return x
	}
	if x := this.GetG(); x != nil {
		return x
	}
	if x := this.GetH(); x != nil {
		return x
	}
	if x := this.GetI(); x != nil {
		return x
	}
	if x := this.GetK(); x != nil {
		return x
	}
	if x := this.GetL(); x != nil {
		return x
	}
	if x := this.GetM(); x != nil {
		return x
	}
	if x := this.GetN(); x != nil {
		return x
	}
	if x := this.GetO(); x != nil {
		return x
	}
	if x := this.GetP(); x != nil {
		return x
	}
	return nil
}

func (this *OneOfTest) SetMsg(value Msg) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *a.MsgPousljlwlybJloivfeuc:
		this.Sum = &OneOfTest_A{vt}
		return nil
	case *a.MsgMrtsdxfVexxblyqrzg:
		this.Sum = &OneOfTest_B{vt}
		return nil
	case *a.MsgLpctqrWokmmwtlm:
		this.Sum = &OneOfTest_C{vt}
		return nil
	case *b.MsgVedycrEaaidqrielx:
		this.Sum = &OneOfTest_D{vt}
		return nil
	case *b.MsgMliexjcuyIcbatudgl:
		this.Sum = &OneOfTest_E{vt}
		return nil
	case *b.MsgYvclzswKwoiqfnvf:
		this.Sum = &OneOfTest_F{vt}
		return nil
	case *c.MsgIggmhogotlAdolnphpfi:
		this.Sum = &OneOfTest_G{vt}
		return nil
	case *c.MsgCrbjxhtnahzEkoyklxdc:
		this.Sum = &OneOfTest_H{vt}
		return nil
	case *c.MsgUzewjmoiKursyvlk:
		this.Sum = &OneOfTest_I{vt}
		return nil
	case *d.MsgBtolfeintfGglqwlxnq:
		this.Sum = &OneOfTest_K{vt}
		return nil
	case *d.MsgMuqmoycgmDomajqaep:
		this.Sum = &OneOfTest_L{vt}
		return nil
	case *d.MsgTqviyexlSsdnfgf:
		this.Sum = &OneOfTest_M{vt}
		return nil
	case *e.MsgJirzatkEjglwxlp:
		this.Sum = &OneOfTest_N{vt}
		return nil
	case *e.MsgUzaztuwkehwWuhanr:
		this.Sum = &OneOfTest_O{vt}
		return nil
	case *e.MsgXoxmigzwnxqIniehuizyb:
		this.Sum = &OneOfTest_P{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message OneOfTest", value)
}

func (m *OneOfTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneOfTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OneOfTest_A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A != nil {
		{
			size, err := m.A.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.B != nil {
		{
			size, err := m.B.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.C != nil {
		{
			size, err := m.C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_D) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_D) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.D != nil {
		{
			size, err := m.D.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_E) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_E) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.E != nil {
		{
			size, err := m.E.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_F) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_F) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F != nil {
		{
			size, err := m.F.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_G) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_G) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.G != nil {
		{
			size, err := m.G.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_H) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_H) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.H != nil {
		{
			size, err := m.H.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_I) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_I) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.I != nil {
		{
			size, err := m.I.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_K) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_K) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K != nil {
		{
			size, err := m.K.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L != nil {
		{
			size, err := m.L.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_M) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_M) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.M != nil {
		{
			size, err := m.M.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_N) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_N) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.N != nil {
		{
			size, err := m.N.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_O) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_O) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.O != nil {
		{
			size, err := m.O.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *OneOfTest_P) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOfTest_P) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.P != nil {
		{
			size, err := m.P.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func encodeVarintRoot(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OneOfTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *OneOfTest_A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.B != nil {
		l = m.B.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_D) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.D != nil {
		l = m.D.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_E) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.E != nil {
		l = m.E.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_F) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F != nil {
		l = m.F.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_G) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.G != nil {
		l = m.G.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_H) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.H != nil {
		l = m.H.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_I) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.I != nil {
		l = m.I.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_K) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K != nil {
		l = m.K.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L != nil {
		l = m.L.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_M) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.M != nil {
		l = m.M.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_N) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.N != nil {
		l = m.N.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_O) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.O != nil {
		l = m.O.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}
func (m *OneOfTest_P) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovRoot(uint64(l))
	}
	return n
}

func sovRoot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoot(x uint64) (n int) {
	return sovRoot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OneOfTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOfTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOfTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &a.MsgPousljlwlybJloivfeuc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_A{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &a.MsgMrtsdxfVexxblyqrzg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_B{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &a.MsgLpctqrWokmmwtlm{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_C{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &b.MsgVedycrEaaidqrielx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_D{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &b.MsgMliexjcuyIcbatudgl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_E{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &b.MsgYvclzswKwoiqfnvf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_F{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &c.MsgIggmhogotlAdolnphpfi{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_G{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &c.MsgCrbjxhtnahzEkoyklxdc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_H{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &c.MsgUzewjmoiKursyvlk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_I{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &d.MsgBtolfeintfGglqwlxnq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_K{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &d.MsgMuqmoycgmDomajqaep{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_L{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &d.MsgTqviyexlSsdnfgf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_M{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &e.MsgJirzatkEjglwxlp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_N{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field O", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &e.MsgUzaztuwkehwWuhanr{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_O{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &e.MsgXoxmigzwnxqIniehuizyb{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &OneOfTest_P{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoot = fmt.Errorf("proto: unexpected end of group")
)
