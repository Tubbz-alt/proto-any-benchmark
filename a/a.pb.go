// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: a/a.proto

package a

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPousljlwlybJloivfeuc struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgPousljlwlybJloivfeuc) Reset()         { *m = MsgPousljlwlybJloivfeuc{} }
func (m *MsgPousljlwlybJloivfeuc) String() string { return proto.CompactTextString(m) }
func (*MsgPousljlwlybJloivfeuc) ProtoMessage()    {}
func (*MsgPousljlwlybJloivfeuc) Descriptor() ([]byte, []int) {
	return fileDescriptor_b544b42e4fa5387d, []int{0}
}
func (m *MsgPousljlwlybJloivfeuc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPousljlwlybJloivfeuc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPousljlwlybJloivfeuc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPousljlwlybJloivfeuc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPousljlwlybJloivfeuc.Merge(m, src)
}
func (m *MsgPousljlwlybJloivfeuc) XXX_Size() int {
	return m.Size()
}
func (m *MsgPousljlwlybJloivfeuc) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPousljlwlybJloivfeuc.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPousljlwlybJloivfeuc proto.InternalMessageInfo

func (m *MsgPousljlwlybJloivfeuc) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgPousljlwlybJloivfeuc) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgPousljlwlybJloivfeuc) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgPousljlwlybJloivfeuc) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgPousljlwlybJloivfeuc) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgPousljlwlybJloivfeuc) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgPousljlwlybJloivfeuc) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgPousljlwlybJloivfeuc) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgPousljlwlybJloivfeuc) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgPousljlwlybJloivfeuc) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

type MsgMrtsdxfVexxblyqrzg struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgMrtsdxfVexxblyqrzg) Reset()         { *m = MsgMrtsdxfVexxblyqrzg{} }
func (m *MsgMrtsdxfVexxblyqrzg) String() string { return proto.CompactTextString(m) }
func (*MsgMrtsdxfVexxblyqrzg) ProtoMessage()    {}
func (*MsgMrtsdxfVexxblyqrzg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b544b42e4fa5387d, []int{1}
}
func (m *MsgMrtsdxfVexxblyqrzg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMrtsdxfVexxblyqrzg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMrtsdxfVexxblyqrzg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMrtsdxfVexxblyqrzg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMrtsdxfVexxblyqrzg.Merge(m, src)
}
func (m *MsgMrtsdxfVexxblyqrzg) XXX_Size() int {
	return m.Size()
}
func (m *MsgMrtsdxfVexxblyqrzg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMrtsdxfVexxblyqrzg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMrtsdxfVexxblyqrzg proto.InternalMessageInfo

func (m *MsgMrtsdxfVexxblyqrzg) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgMrtsdxfVexxblyqrzg) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgMrtsdxfVexxblyqrzg) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgMrtsdxfVexxblyqrzg) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgMrtsdxfVexxblyqrzg) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgMrtsdxfVexxblyqrzg) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgMrtsdxfVexxblyqrzg) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgMrtsdxfVexxblyqrzg) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgMrtsdxfVexxblyqrzg) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgMrtsdxfVexxblyqrzg) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

type MsgLpctqrWokmmwtlm struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	C uint64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D string `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
	E int64  `protobuf:"varint,5,opt,name=e,proto3" json:"e,omitempty"`
	F []byte `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	G string `protobuf:"bytes,7,opt,name=g,proto3" json:"g,omitempty"`
	H []byte `protobuf:"bytes,8,opt,name=h,proto3" json:"h,omitempty"`
	I string `protobuf:"bytes,9,opt,name=i,proto3" json:"i,omitempty"`
	J []byte `protobuf:"bytes,10,opt,name=j,proto3" json:"j,omitempty"`
}

func (m *MsgLpctqrWokmmwtlm) Reset()         { *m = MsgLpctqrWokmmwtlm{} }
func (m *MsgLpctqrWokmmwtlm) String() string { return proto.CompactTextString(m) }
func (*MsgLpctqrWokmmwtlm) ProtoMessage()    {}
func (*MsgLpctqrWokmmwtlm) Descriptor() ([]byte, []int) {
	return fileDescriptor_b544b42e4fa5387d, []int{2}
}
func (m *MsgLpctqrWokmmwtlm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLpctqrWokmmwtlm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLpctqrWokmmwtlm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLpctqrWokmmwtlm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLpctqrWokmmwtlm.Merge(m, src)
}
func (m *MsgLpctqrWokmmwtlm) XXX_Size() int {
	return m.Size()
}
func (m *MsgLpctqrWokmmwtlm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLpctqrWokmmwtlm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLpctqrWokmmwtlm proto.InternalMessageInfo

func (m *MsgLpctqrWokmmwtlm) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *MsgLpctqrWokmmwtlm) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MsgLpctqrWokmmwtlm) GetC() uint64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *MsgLpctqrWokmmwtlm) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

func (m *MsgLpctqrWokmmwtlm) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *MsgLpctqrWokmmwtlm) GetF() []byte {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *MsgLpctqrWokmmwtlm) GetG() string {
	if m != nil {
		return m.G
	}
	return ""
}

func (m *MsgLpctqrWokmmwtlm) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *MsgLpctqrWokmmwtlm) GetI() string {
	if m != nil {
		return m.I
	}
	return ""
}

func (m *MsgLpctqrWokmmwtlm) GetJ() []byte {
	if m != nil {
		return m.J
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgPousljlwlybJloivfeuc)(nil), "tobrqchnip.pqvmqjx.hmeluptxh.MsgPousljlwlybJloivfeuc")
	proto.RegisterType((*MsgMrtsdxfVexxblyqrzg)(nil), "tobrqchnip.pqvmqjx.hmeluptxh.MsgMrtsdxfVexxblyqrzg")
	proto.RegisterType((*MsgLpctqrWokmmwtlm)(nil), "tobrqchnip.pqvmqjx.hmeluptxh.MsgLpctqrWokmmwtlm")
}

func init() { proto.RegisterFile("a/a.proto", fileDescriptor_b544b42e4fa5387d) }

var fileDescriptor_b544b42e4fa5387d = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xd2, 0x31, 0x4e, 0xf3, 0x30,
	0x1c, 0x05, 0xf0, 0xfe, 0xbf, 0xf6, 0x2b, 0x34, 0xea, 0x54, 0x09, 0xe1, 0x01, 0x45, 0x51, 0xa7,
	0x2c, 0x4d, 0x06, 0x6e, 0xc0, 0x84, 0x10, 0x91, 0x50, 0x06, 0x90, 0xd8, 0xec, 0xd4, 0xb1, 0x93,
	0xda, 0x71, 0xe2, 0x38, 0x6d, 0xca, 0x29, 0x38, 0x02, 0x12, 0xe2, 0x2e, 0x8c, 0x1d, 0x19, 0x51,
	0x7b, 0x11, 0xe4, 0xf8, 0x12, 0x1d, 0x7f, 0x7e, 0xcf, 0xd2, 0x1b, 0xfe, 0xde, 0x0c, 0xc7, 0x38,
	0xaa, 0xb5, 0x32, 0x6a, 0x71, 0x63, 0x14, 0xd1, 0x4d, 0xc6, 0xab, 0xa2, 0x8e, 0xea, 0x66, 0x2b,
	0x9b, 0xb2, 0x8f, 0xb8, 0xa4, 0xa2, 0xab, 0x4d, 0xcf, 0x97, 0x5f, 0xe0, 0x5d, 0x27, 0x2d, 0x7b,
	0x52, 0x5d, 0x2b, 0x4a, 0xb1, 0x13, 0x7b, 0xf2, 0x20, 0x54, 0xb1, 0xcd, 0x69, 0x97, 0x2d, 0xe6,
	0x1e, 0x60, 0x04, 0x01, 0x84, 0xb3, 0x14, 0xb0, 0x15, 0x41, 0xff, 0x02, 0x08, 0xe7, 0x29, 0x10,
	0xab, 0x0c, 0x8d, 0x03, 0x08, 0x27, 0x29, 0x0c, 0xcd, 0x35, 0x9a, 0xb8, 0xe6, 0xda, 0x8a, 0xa2,
	0xff, 0x01, 0x84, 0xe3, 0x14, 0xa8, 0x55, 0x8e, 0xa6, 0xee, 0x5f, 0x6e, 0xc5, 0xd0, 0x85, 0x6b,
	0x32, 0x2b, 0x8e, 0x2e, 0x5d, 0xc6, 0xad, 0x0a, 0x34, 0x73, 0x59, 0x61, 0x55, 0x22, 0xcf, 0x65,
	0xe5, 0xf2, 0x13, 0xbc, 0xab, 0xa4, 0x65, 0x89, 0x36, 0xed, 0xba, 0xcf, 0x9f, 0x69, 0xdf, 0x13,
	0xb1, 0x6f, 0xf4, 0x1b, 0x3b, 0xab, 0x95, 0x1f, 0xe0, 0x2d, 0x92, 0x96, 0x3d, 0xd6, 0x99, 0x69,
	0xf4, 0x8b, 0xda, 0x48, 0xb9, 0x33, 0x42, 0x9e, 0xd3, 0xc4, 0xbb, 0xfb, 0xef, 0xa3, 0x0f, 0x87,
	0xa3, 0x0f, 0xbf, 0x47, 0x1f, 0xde, 0x4f, 0xfe, 0xe8, 0x70, 0xf2, 0x47, 0x3f, 0x27, 0x7f, 0xf4,
	0x1a, 0xb1, 0xc2, 0xf0, 0x8e, 0x44, 0x99, 0x92, 0xb1, 0xa6, 0x8c, 0x56, 0xab, 0x8a, 0x9a, 0x9d,
	0xd2, 0x9b, 0x78, 0x38, 0xa4, 0x15, 0xae, 0xf6, 0x2b, 0x42, 0xab, 0x8c, 0x4b, 0xac, 0x37, 0x31,
	0x26, 0xd3, 0xe1, 0xf9, 0xf6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xca, 0xb5, 0x5b, 0x6c, 0x02,
	0x00, 0x00,
}

func (m *MsgPousljlwlybJloivfeuc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPousljlwlybJloivfeuc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPousljlwlybJloivfeuc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintA(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintA(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintA(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintA(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintA(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintA(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintA(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintA(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMrtsdxfVexxblyqrzg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMrtsdxfVexxblyqrzg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMrtsdxfVexxblyqrzg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintA(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintA(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintA(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintA(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintA(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintA(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintA(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintA(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLpctqrWokmmwtlm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLpctqrWokmmwtlm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLpctqrWokmmwtlm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.J) > 0 {
		i -= len(m.J)
		copy(dAtA[i:], m.J)
		i = encodeVarintA(dAtA, i, uint64(len(m.J)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintA(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.H) > 0 {
		i -= len(m.H)
		copy(dAtA[i:], m.H)
		i = encodeVarintA(dAtA, i, uint64(len(m.H)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.G) > 0 {
		i -= len(m.G)
		copy(dAtA[i:], m.G)
		i = encodeVarintA(dAtA, i, uint64(len(m.G)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.F) > 0 {
		i -= len(m.F)
		copy(dAtA[i:], m.F)
		i = encodeVarintA(dAtA, i, uint64(len(m.F)))
		i--
		dAtA[i] = 0x32
	}
	if m.E != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.E))
		i--
		dAtA[i] = 0x28
	}
	if len(m.D) > 0 {
		i -= len(m.D)
		copy(dAtA[i:], m.D)
		i = encodeVarintA(dAtA, i, uint64(len(m.D)))
		i--
		dAtA[i] = 0x22
	}
	if m.C != 0 {
		i = encodeVarintA(dAtA, i, uint64(m.C))
		i--
		dAtA[i] = 0x18
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintA(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintA(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintA(dAtA []byte, offset int, v uint64) int {
	offset -= sovA(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPousljlwlybJloivfeuc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovA(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovA(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	return n
}

func (m *MsgMrtsdxfVexxblyqrzg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovA(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovA(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	return n
}

func (m *MsgLpctqrWokmmwtlm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.C != 0 {
		n += 1 + sovA(uint64(m.C))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	if m.E != 0 {
		n += 1 + sovA(uint64(m.E))
	}
	l = len(m.F)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.G)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	l = len(m.J)
	if l > 0 {
		n += 1 + l + sovA(uint64(l))
	}
	return n
}

func sovA(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozA(x uint64) (n int) {
	return sovA(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPousljlwlybJloivfeuc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPousljlwlybJloivfeuc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPousljlwlybJloivfeuc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMrtsdxfVexxblyqrzg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMrtsdxfVexxblyqrzg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMrtsdxfVexxblyqrzg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLpctqrWokmmwtlm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLpctqrWokmmwtlm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLpctqrWokmmwtlm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = append(m.F[:0], dAtA[iNdEx:postIndex]...)
			if m.F == nil {
				m.F = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.G = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.J = append(m.J[:0], dAtA[iNdEx:postIndex]...)
			if m.J == nil {
				m.J = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipA(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowA
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthA
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupA
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthA
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthA        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowA          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupA = fmt.Errorf("proto: unexpected end of group")
)
